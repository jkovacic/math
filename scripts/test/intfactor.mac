/*
 * A Maxima script that reproduces expected results of the test module
 * 'test/intfactorTest.cpp'.
 *
 * From a shell, run the script as:
 *   maxima -b /path/to/intfactor.mac
 *
 * From Maxima/wxMaxima, the script can be run as:
 *   batch("/path/to/intfactor.mac")
 */

load("functs")$

block(
  [nums, i],

  print("int. sqrt of 12 = ", floor(sqrt(12)) ),
  print("int. sqrt of 100 = ", floor(sqrt(100)) ),
  print("int. sqrt of 37423 = ", floor(sqrt(37423)) ),

  nums: [3, 6, 15, 37, 257, 703, 907, 101861, 102601, 104597],
  for i: 1 thru length(nums) do
    block( 
      [p],
      p: nums[i],

      print("Is ", p, " a prime: ", primep(p), ", next prime: ", next_prime(p) )
    ),

  nums: [245, 6784, 21737, 195327, 3428543],
  for i: 1 thru length(nums) do
    block(
      [p],
      p: nums[i],

      print("Prime factors of ", p, ": ", ifactors(p) ),
      print("Divisors of ", p, ": ", divisors(p) )
    ),

  nums: [ [500, 1000], [85, 3428543], [15, 100], [3, 57], [234, 7643] ],
  for i: 1 thru length(nums) do
    block(
      [a, b, g, l],
      a: nums[i][1],
      b: nums[i][2],
      g: gcd(a, b),
      l: lcm(a, b),
      
      print("gcd(", a, ", ", b, ") = ", g ),
      print("lcm(", a, ", ", b, ") = ", l ),
      print("gcd * lcm = ", g*l ),
      print(a, " * ", b, " = ", a*b )
    )

)$
